#!/bin/bash

set -e
set -o pipefail

mounted_snapshot=$(mount | grep snapshot | gawk  'match($6, /ro.*@\/.snapshots\/(.*)\/snapshot/ , arr1 ) { print arr1[1] }')

inited_subvolume=false

init(){
  if [ $inited_subvolume = false ]; then
    systemctl stop kubelet
    systemctl stop docker

    if [ -n "$mounted_snapshot" ]; then
      btrfs property set -ts /.snapshots/$mounted_snapshot/snapshot ro false
    fi
    mount -o remount, rw /
    inited_subvolume=true
  fi
}

create_subvolume(){
  if [ ! -d "$1" ]; then
    init
    mksubvolume "$1"
    # make sure that directory related to volume is already created
    mkdir -p "$1"
  fi
}

restore_and_reboot() {
  if [ $inited_subvolume = true ]; then
    if [ -n "$mounted_snapshot" ]; then
      btrfs property set -ts /.snapshots/$mounted_snapshot/snapshot ro true
    fi
    echo "reboot now"
  fi
}

delete_subvolume(){
  if [ -d "$1" ]; then
    init
    devpath=$(grep $1 /proc/mounts | awk '{print $1}')
    mount $devpath $2 -o subvol="/@"
    btrfs subvolume delete "$2/$1" || true
    umount "$2" || true
  fi
}

if [ $1 == "create_subvolume" ]; then
  {% for subvol in caasp_node_subvolumes %}
  create_subvolume {{ subvol }}
  {% endfor %}
  restore_and_reboot

elif [ $1 = "delete_subvolume" ]; then
  tmpdir=$(mktemp -d -p /tmp)
  if [ -n "$tmpdir" ]; then
    {% for subvol in caasp_node_subvolumes %}
    delete_subvolume {{ subvol }} "$tmpdir"
    {% endfor %}
    rmdir "$tmpdir"
    echo "reboot now"
  fi
fi
